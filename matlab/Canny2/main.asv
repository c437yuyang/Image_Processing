clear;
clc;
i=imread('light.jpg');
k=rgb2y(i);%获取h分量，即亮度分量

k1=gaosi(k);%横向滤波
k1=k1';%对图像进行转置，为下一步纵向滤波作准备（纵向滤波==转置后横向滤波）
k1=gaosi(k1);
k1=k1';%还原


%计算梯度的大小和方向
[h,w]=size(k);
for m=2:h-1
    for n=2:w-1
        zz1=k1(m,n-1)+k1(m+1,n-1);
        zz2=k1(m,n)+k1(m+1,n);
        zz3=k1(m,n-1)+k1(m,n);
        zz4=k1(m+1,n-1)+k1(m+1,n);
        kp(m,n)=0.5*(zz2-zz1);
        kq(m,n)=0.5*(zz3-zz4);
        kfu(m,n)=sqrt((kp(m,n)^2)+(kq(m,n)^2));%梯度大小
        kjiao(m,n)=atan(kq(m,n)/(kp(m,n)+0.001));%梯度方向,0.001防止分母为0
    end
end



2016-12-12  DevilyrCy...  转自 学海无涯GL
修改
微信
分享：
canny 算子实现图像边缘检测（详细过程附源码）

canny边缘检测法是高斯函数的一阶微分,它能在噪声抑制和边缘检测之间取得较好的平衡.

环境：windows xp+matlab 2010b

时间：2011/12/25

canny算法检测边缘主要步骤：

1）用3x3高斯滤波器进行滤波，消除噪声；

2）针对每一个像素，计算横向与纵向两方向的微分近似，以得到像素的梯度大小和方向；

3）对梯度进行"非极大抑制"（非局部最大值置0）；

4）对梯度取两次阈值；

5）对边缘进行连接；

下面详细说明各个步骤：

0）读入图像：

clear;
clc;
i=imread('light.jpg');
k=rgb2y(i);%获取h分量，即亮度分量

根据边缘的定义，边缘检测的目的是标识数字图像中亮度变化明显的点。（参考维基百科http://zh.wikipedia.org/wiki/%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B）；

又根据公式Brightness = 0.3 * R + 0.6 * G + 0.1 * B；计算出亮度分量y;
复制代码

function k=rgb2y(z)
%i必须为rgb三维矩阵
[m,n,p]=size(z);
k=zeros(m,n);
z=double(z);
for i=1:m
    for j=1:n
       k(i,j)=0.3*z(i,j,1)+0.6*z(i,j,2)+0.1*z(i,j,3);
    end
end

复制代码

1）用3x3高斯滤波器进行滤波，消除噪声；
复制代码

function j=gaosi(i);
%i必须为二维double矩阵
j=i;
[h,w]=size(i);
for m=2;h-1
    for n=2:w-1
        j(m,n)=(i(m,n-1)+2*i(m,n)+i(m,n+1))/4;%横向高斯滤波
    end
end

复制代码

利用上面自定义的gaosi函数对图像进行二维3x3滤波，

k1=gaosi(k);%横向滤波
k1=k1';%对图像进行转置，为下一步纵向滤波作准备（纵向滤波==转置后横向滤波）
k1=gaosi(k1);
k1=k1';%还原

2）针对每一个像素，计算横向与纵向两方向的微分近似，以得到像素的梯度大小和方向；

利用上式，易知p,q分别为计算出的横向、纵向的微分近似，由此再计算出梯度的大小和方向。
复制代码

%计算梯度的大小和方向
[h,w]=size(k);
for m=2:h-1
    for n=2:w-1
        zz1=k1(m,n-1)+k1(m+1,n-1);
        zz2=k1(m,n)+k1(m+1,n);
        zz3=k1(m,n-1)+k1(m,n);
        zz4=k1(m+1,n-1)+k1(m+1,n);
        kp(m,n)=0.5*(zz2-zz1);
        kq(m,n)=0.5*(zz3-zz4);
        kfu(m,n)=sqrt((kp(m,n)^2)+(kq(m,n)^2));%梯度大小
        kjiao(m,n)=atan(kq(m,n)/(kp(m,n)+0.001));%梯度方向,0.001防止分母为0
    end
end


%非极大值抑制
%首先将梯度方向划分为4个方向0,45,90,135（以及他们的反向延长线）
for m=2:h-1
    for n=2:w-1
        if kjiao(m,n)>=3/8*pi
            kjiao(m,n)=2;
        else if kjiao(m,n)>=1/8*pi
            kjiao(m,n)=1;
        else if  kjiao(m,n)>=-1/8*pi
             kjiao(m,n)=0;
        else if  kjiao(m,n)>=-3/8*pi
             kjiao(m,n)=3;
            else
                kjiao(m,n)=2;
            end
            end
            end
        end
    end
end


%按照各个方向分别判断
k2=k1;
for m=2:h-1
    for n=2:w-1
       if kjiao(m,n)==0
           if k1(m,n)>k1(m,n-1)&&k1(m,n)>k1(m,n+1);
           else k2(m,n)=0;
           end
       end
       if kjiao(m,n)==1
           if k1(m,n)>k1(m+1,n-1)&&k1(m,n)>k1(m-1,n+1);
           else k2(m,n)=0;
           end
       end
       if kjiao(m,n)==2
           if k1(m,n)>k1(m-1,n)&&k1(m,n)>k1(m+1,n);
           else k2(m,n)=0;
           end
       end
       if kjiao(m,n)==3
           if k1(m,n)>k1(m-1,n-1)&&k1(m,n)>k1(m+1,n+1);
           else k2(m,n)=0;
           end
       end
    end
end

%两次阈值分割
k3=k2;%以t1为阈值分割后的矩阵
k4=k2;%以t2为阈值分割后的矩阵
t1=50;
t2=2*t1;
for m=2:h-1
    for n=2:w-1
       if kfu(m,n)<t1
           k3(m,n)=0;
       end
       if kfu(m,n)<t2
           k4(m,n)=0;
       end
    end
end